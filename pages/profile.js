// React
import { useEffect } from "react";

// Next-js components and libs
import { useRouter } from "next/router";
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

// UX with Chakra-UI
import { Box, Button, Center, Divider, Flex, Heading, SkeletonCircle, SkeletonText, useColorMode } from "@chakra-ui/react";

// App components
// import Account from '../components/ProfileForm'

// Supabase & APIs
import cookie from "cookie";
import supabase from "../lib/supabase";
import ProfileForm from "../components/ProfileForm";
import ProfileFormPlaceholder from "../components/ProfileFormPlaceholder";
// import { fetchProfile } from "../lib/api";
import {useAuth} from "../hooks";

export async function getServerSideProps({ req, res }) {
  const { user } = await supabase.auth.api.getUserByCookie(req);
  console.log("User", user);

  if (!user) {
    return { props: {}, redirect: { destination: '/sign-in', permanent: false } };
  }

  // const token = cookie.parse(req.headers.cookie)["sb-access-token"];

  // supabase.auth.session = () => ({
  //   access_token: token,
  // });

  // const profile = await fetchProfile({ id: user.id, colName: "user_id" });

  // If there is a user, return it.
  return { props: { user } };
}

export default function Profile() {
  const router = useRouter();
  const { user, profile, isLoading } = useAuth();
  const { colorMode, toggleColorMode } = useColorMode();

  useEffect(() => {
    console.log("user:", user);
    console.log("isLoading:", isLoading);
    if (user || isLoading) return;

    router.push("/");
  }, [user, router, isLoading]);

  return (
    <Flex direction="column" align="center" minH="100vh">
      <Head>
        <title>User Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Flex direction="row" w="100%" align="center" justify="space-between" py="8" px="8">
        <Heading>Next.js + Supabase</Heading>
        <Button onClick={toggleColorMode}>
          Toggle {colorMode === 'light' ? 'Dark' : 'Light'}
        </Button>
      </Flex>

      <Center flexGrow="1" width="100%">
        { user && profile ? <ProfileForm user={user} profile={profile} /> : <ProfileFormPlaceholder /> }
      </Center>

      <Box p="4" w="100vw" textAlign="center">
        <Divider mb="4"/>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </Box>
    </Flex>
  );
}